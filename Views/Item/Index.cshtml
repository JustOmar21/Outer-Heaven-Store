@model List<WebShopping.Models.Item>

@{
    ViewBag.Title = $"{Resources.Items}";
}

<h2>@Resources.Items @Html.ActionLink($"{Resources.Add} +", "Add", "Item", new { @class = "btn btn-primary" })</h2>

@Html.Partial("Alerts")
<div><input class="form-control searchField mb-3" placeholder="@Resources.SearchName" oninput="Search(event)" /></div>

<style>
    .DescOverFlow {
        max-width: 100px;
        max-height: 100px;
        overflow: auto;
    }
</style>
<div class="table-responsive">

    <table class="table table-bordered table-hover table-striped text-center text-capitalize">
        <thead>
            <tr>
                <th>@Resources.ID</th>
                <th>@Resources.Name</th>
                <th>@Resources.Description</th>
                <th>@Resources.Category</th>
                <th>@Resources.Amount</th>
                <th>@Resources.Price</th>
                <th>@Resources.Image</th>
                <th>@Resources.Ops</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.ID</td>
                    <td>@item.Name</td>
                    <td class="DescOverFlow">@item.Description</td>
                    <td>@item.Category.Name</td>
                    <td>@item.Amount.ToString($"0,0 '{Resources.Unit}'")</td>
                    <td>@item.Price.ToString("0,0.00 'EGP'")</td>
                    <td class="DescOverFlow"><img src="@item.ImageURL" alt="@Resources.ImgItem" style="width:70px; height:70px;" /></td>
                    <td class="flex justify-content-between text-nowrap">
                        @Html.ActionLink($"{Resources.Update}", "Edit", "Item", new { id = item.ID }, new { @class = "btn btn-outline-primary" })
                        @Html.ActionLink($"{Resources.ImgUpdate}", "UpdatePhoto", "Item", new { id = item.ID }, new { @class = "btn btn-outline-dark" })
                        <button class="btn btn-outline-danger" onclick="sendValues(@item.ID,'@item.Name')" data-bs-toggle="modal" data-bs-target="#exampleModal">@Resources.Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Modal -->
@using (Html.BeginForm("Delete", "Item", FormMethod.Post))
{
    @Html.AntiForgeryToken()


    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5 text-danger" id="exampleModalLabel">@Resources.DelOps</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this item ?

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Resources.Cancel</button>
                    <input hidden name="id" class="hiddenID" />
                    <button type="submit" class="btn btn-danger">@Resources.DelConfirm</button>
                </div>
            </div>
        </div>
    </div>
}


@section scripts {
    <script>
        var Name;
        var ID;
        var children = Array.from(document.querySelectorAll("tbody tr"));
        function sendValues(ID, Name) {
            console.log(ID)
            this.ID = ID
            document.querySelector(".modal-body").innerHTML = `@Resources.ItemDel`
            document.querySelector(".hiddenID").value = ID;
        }
        function Search(e) {
            var body = document.querySelector("tbody");
            body.innerHTML = ""
            for (var item of children) {
                body.innerHTML += item
            }
            var childrens = Array.from(document.querySelectorAll("tbody tr"));

            var filtered = children.filter((item) => {
                return item.children[1].innerText.toLowerCase().includes(e.currentTarget.value.toLowerCase())
            })
            body.innerHTML = ""
            for (var item of filtered) {
                body.innerHTML += item.innerHTML
            }
        }
    </script>
}